// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package usereventpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserEventServiceClient is the client API for UserEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserEventServiceClient interface {
	CreateUserEvent(ctx context.Context, in *CreateUserEventRequest, opts ...grpc.CallOption) (*CreateUserEventResponse, error)
	IsEventAvailable(ctx context.Context, in *IsEventAvailableRequest, opts ...grpc.CallOption) (*IsEventAvailableResponse, error)
	UpdateUserEvent(ctx context.Context, in *UpdateUserEventRequest, opts ...grpc.CallOption) (*UpdateUserEventResponse, error)
}

type userEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserEventServiceClient(cc grpc.ClientConnInterface) UserEventServiceClient {
	return &userEventServiceClient{cc}
}

func (c *userEventServiceClient) CreateUserEvent(ctx context.Context, in *CreateUserEventRequest, opts ...grpc.CallOption) (*CreateUserEventResponse, error) {
	out := new(CreateUserEventResponse)
	err := c.cc.Invoke(ctx, "/usereventpb.UserEventService/CreateUserEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userEventServiceClient) IsEventAvailable(ctx context.Context, in *IsEventAvailableRequest, opts ...grpc.CallOption) (*IsEventAvailableResponse, error) {
	out := new(IsEventAvailableResponse)
	err := c.cc.Invoke(ctx, "/usereventpb.UserEventService/IsEventAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userEventServiceClient) UpdateUserEvent(ctx context.Context, in *UpdateUserEventRequest, opts ...grpc.CallOption) (*UpdateUserEventResponse, error) {
	out := new(UpdateUserEventResponse)
	err := c.cc.Invoke(ctx, "/usereventpb.UserEventService/UpdateUserEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserEventServiceServer is the server API for UserEventService service.
// All implementations must embed UnimplementedUserEventServiceServer
// for forward compatibility
type UserEventServiceServer interface {
	CreateUserEvent(context.Context, *CreateUserEventRequest) (*CreateUserEventResponse, error)
	IsEventAvailable(context.Context, *IsEventAvailableRequest) (*IsEventAvailableResponse, error)
	UpdateUserEvent(context.Context, *UpdateUserEventRequest) (*UpdateUserEventResponse, error)
	mustEmbedUnimplementedUserEventServiceServer()
}

// UnimplementedUserEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserEventServiceServer struct {
}

func (UnimplementedUserEventServiceServer) CreateUserEvent(context.Context, *CreateUserEventRequest) (*CreateUserEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserEvent not implemented")
}
func (UnimplementedUserEventServiceServer) IsEventAvailable(context.Context, *IsEventAvailableRequest) (*IsEventAvailableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsEventAvailable not implemented")
}
func (UnimplementedUserEventServiceServer) UpdateUserEvent(context.Context, *UpdateUserEventRequest) (*UpdateUserEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserEvent not implemented")
}
func (UnimplementedUserEventServiceServer) mustEmbedUnimplementedUserEventServiceServer() {}

// UnsafeUserEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserEventServiceServer will
// result in compilation errors.
type UnsafeUserEventServiceServer interface {
	mustEmbedUnimplementedUserEventServiceServer()
}

func RegisterUserEventServiceServer(s grpc.ServiceRegistrar, srv UserEventServiceServer) {
	s.RegisterService(&UserEventService_ServiceDesc, srv)
}

func _UserEventService_CreateUserEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserEventServiceServer).CreateUserEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usereventpb.UserEventService/CreateUserEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserEventServiceServer).CreateUserEvent(ctx, req.(*CreateUserEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserEventService_IsEventAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsEventAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserEventServiceServer).IsEventAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usereventpb.UserEventService/IsEventAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserEventServiceServer).IsEventAvailable(ctx, req.(*IsEventAvailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserEventService_UpdateUserEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserEventServiceServer).UpdateUserEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usereventpb.UserEventService/UpdateUserEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserEventServiceServer).UpdateUserEvent(ctx, req.(*UpdateUserEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserEventService_ServiceDesc is the grpc.ServiceDesc for UserEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usereventpb.UserEventService",
	HandlerType: (*UserEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserEvent",
			Handler:    _UserEventService_CreateUserEvent_Handler,
		},
		{
			MethodName: "IsEventAvailable",
			Handler:    _UserEventService_IsEventAvailable_Handler,
		},
		{
			MethodName: "UpdateUserEvent",
			Handler:    _UserEventService_UpdateUserEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event-management/gunk/v1/userEvent/all.proto",
}
