// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package eventTypepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventTypeServiceClient is the client API for EventTypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventTypeServiceClient interface {
	CreateEventType(ctx context.Context, in *CreateEventTypeRequest, opts ...grpc.CallOption) (*CreateEventTypeResponse, error)
	EditEventType(ctx context.Context, in *EditEventTypeRequest, opts ...grpc.CallOption) (*EditEventTypeResponse, error)
	UpdateEventType(ctx context.Context, in *UpdateEventTypeRequest, opts ...grpc.CallOption) (*UpdateEventTypeResponse, error)
	DeleteEventType(ctx context.Context, in *DeleteEventTypeRequest, opts ...grpc.CallOption) (*DeleteEventTypeResponse, error)
	EventTypeList(ctx context.Context, in *EventTypeListRequest, opts ...grpc.CallOption) (*EventTypeListResponse, error)
}

type eventTypeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventTypeServiceClient(cc grpc.ClientConnInterface) EventTypeServiceClient {
	return &eventTypeServiceClient{cc}
}

func (c *eventTypeServiceClient) CreateEventType(ctx context.Context, in *CreateEventTypeRequest, opts ...grpc.CallOption) (*CreateEventTypeResponse, error) {
	out := new(CreateEventTypeResponse)
	err := c.cc.Invoke(ctx, "/eventTypepb.EventTypeService/CreateEventType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTypeServiceClient) EditEventType(ctx context.Context, in *EditEventTypeRequest, opts ...grpc.CallOption) (*EditEventTypeResponse, error) {
	out := new(EditEventTypeResponse)
	err := c.cc.Invoke(ctx, "/eventTypepb.EventTypeService/EditEventType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTypeServiceClient) UpdateEventType(ctx context.Context, in *UpdateEventTypeRequest, opts ...grpc.CallOption) (*UpdateEventTypeResponse, error) {
	out := new(UpdateEventTypeResponse)
	err := c.cc.Invoke(ctx, "/eventTypepb.EventTypeService/UpdateEventType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTypeServiceClient) DeleteEventType(ctx context.Context, in *DeleteEventTypeRequest, opts ...grpc.CallOption) (*DeleteEventTypeResponse, error) {
	out := new(DeleteEventTypeResponse)
	err := c.cc.Invoke(ctx, "/eventTypepb.EventTypeService/DeleteEventType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTypeServiceClient) EventTypeList(ctx context.Context, in *EventTypeListRequest, opts ...grpc.CallOption) (*EventTypeListResponse, error) {
	out := new(EventTypeListResponse)
	err := c.cc.Invoke(ctx, "/eventTypepb.EventTypeService/EventTypeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventTypeServiceServer is the server API for EventTypeService service.
// All implementations must embed UnimplementedEventTypeServiceServer
// for forward compatibility
type EventTypeServiceServer interface {
	CreateEventType(context.Context, *CreateEventTypeRequest) (*CreateEventTypeResponse, error)
	EditEventType(context.Context, *EditEventTypeRequest) (*EditEventTypeResponse, error)
	UpdateEventType(context.Context, *UpdateEventTypeRequest) (*UpdateEventTypeResponse, error)
	DeleteEventType(context.Context, *DeleteEventTypeRequest) (*DeleteEventTypeResponse, error)
	EventTypeList(context.Context, *EventTypeListRequest) (*EventTypeListResponse, error)
	mustEmbedUnimplementedEventTypeServiceServer()
}

// UnimplementedEventTypeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventTypeServiceServer struct {
}

func (UnimplementedEventTypeServiceServer) CreateEventType(context.Context, *CreateEventTypeRequest) (*CreateEventTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEventType not implemented")
}
func (UnimplementedEventTypeServiceServer) EditEventType(context.Context, *EditEventTypeRequest) (*EditEventTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditEventType not implemented")
}
func (UnimplementedEventTypeServiceServer) UpdateEventType(context.Context, *UpdateEventTypeRequest) (*UpdateEventTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEventType not implemented")
}
func (UnimplementedEventTypeServiceServer) DeleteEventType(context.Context, *DeleteEventTypeRequest) (*DeleteEventTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEventType not implemented")
}
func (UnimplementedEventTypeServiceServer) EventTypeList(context.Context, *EventTypeListRequest) (*EventTypeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventTypeList not implemented")
}
func (UnimplementedEventTypeServiceServer) mustEmbedUnimplementedEventTypeServiceServer() {}

// UnsafeEventTypeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventTypeServiceServer will
// result in compilation errors.
type UnsafeEventTypeServiceServer interface {
	mustEmbedUnimplementedEventTypeServiceServer()
}

func RegisterEventTypeServiceServer(s grpc.ServiceRegistrar, srv EventTypeServiceServer) {
	s.RegisterService(&EventTypeService_ServiceDesc, srv)
}

func _EventTypeService_CreateEventType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTypeServiceServer).CreateEventType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventTypepb.EventTypeService/CreateEventType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTypeServiceServer).CreateEventType(ctx, req.(*CreateEventTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTypeService_EditEventType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditEventTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTypeServiceServer).EditEventType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventTypepb.EventTypeService/EditEventType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTypeServiceServer).EditEventType(ctx, req.(*EditEventTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTypeService_UpdateEventType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTypeServiceServer).UpdateEventType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventTypepb.EventTypeService/UpdateEventType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTypeServiceServer).UpdateEventType(ctx, req.(*UpdateEventTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTypeService_DeleteEventType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTypeServiceServer).DeleteEventType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventTypepb.EventTypeService/DeleteEventType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTypeServiceServer).DeleteEventType(ctx, req.(*DeleteEventTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTypeService_EventTypeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventTypeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTypeServiceServer).EventTypeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventTypepb.EventTypeService/EventTypeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTypeServiceServer).EventTypeList(ctx, req.(*EventTypeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventTypeService_ServiceDesc is the grpc.ServiceDesc for EventTypeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventTypeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eventTypepb.EventTypeService",
	HandlerType: (*EventTypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEventType",
			Handler:    _EventTypeService_CreateEventType_Handler,
		},
		{
			MethodName: "EditEventType",
			Handler:    _EventTypeService_EditEventType_Handler,
		},
		{
			MethodName: "UpdateEventType",
			Handler:    _EventTypeService_UpdateEventType_Handler,
		},
		{
			MethodName: "DeleteEventType",
			Handler:    _EventTypeService_DeleteEventType_Handler,
		},
		{
			MethodName: "EventTypeList",
			Handler:    _EventTypeService_EventTypeList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event-management/gunk/v1/eventType/all.proto",
}
